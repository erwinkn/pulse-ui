name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      js_matrix: ${{ steps.detect.outputs.js_matrix }}
      python_matrix: ${{ steps.detect.outputs.python_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Determine base revision
        id: base
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "sha=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            first_commit="$(git rev-list --max-parents=0 HEAD | tail -n 1)"
            echo "sha=${first_commit}" >> "$GITHUB_OUTPUT"
          else
            echo "sha=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect version changes
        id: detect
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          python <<'PY'
          import json
          import os
          import subprocess
          from pathlib import Path
          try:
              import tomllib  # type: ignore[attr-defined]
          except ModuleNotFoundError:
              import tomli as tomllib  # type: ignore[assignment]

          base = os.environ.get("BASE_SHA")
          head = os.environ.get("GITHUB_SHA")

          def git_output(*args: str) -> list[str]:
              try:
                  result = subprocess.check_output(["git", *args], text=True)
              except subprocess.CalledProcessError:
                  return []
              return [line for line in result.splitlines() if line.strip()]

          if not base or set(base) == {"0"}:
              first_commits = git_output("rev-list", "--max-parents=0", head or "HEAD")
              base = first_commits[-1] if first_commits else ""

          def read_file_at(commit: str | None, path: str) -> str | None:
              if not commit:
                  return None
              try:
                  return subprocess.check_output(
                      ["git", "show", f"{commit}:{path}"], text=True
                  )
              except subprocess.CalledProcessError:
                  return None

          js_candidates = git_output(
              "diff",
              "--name-only",
              base,
              head,
              "--",
              ":(glob)packages/**/package.json",
          )

          python_candidates = git_output(
              "diff",
              "--name-only",
              base,
              head,
              "--",
              ":(glob)packages/**/pyproject.toml",
          )

          js_dirs: set[str] = set()
          python_dirs: set[str] = set()

          for path in js_candidates:
              file_path = Path(path)
              if not file_path.is_file():
                  continue

              new_data = json.loads(file_path.read_text())
              if new_data.get("private"):
                  continue
              new_version = new_data.get("version")

              old_raw = read_file_at(base, path)
              old_version = None
              if old_raw:
                  try:
                      old_version = json.loads(old_raw).get("version")
                  except json.JSONDecodeError:
                      old_version = None

              if new_version and new_version != old_version:
                  js_dirs.add(str(file_path.parent))

          for path in python_candidates:
              file_path = Path(path)
              if not file_path.is_file():
                  continue

              with file_path.open("rb") as fh:
                  data = tomllib.load(fh)
              new_version = data.get("project", {}).get("version")

              old_raw = read_file_at(base, path)
              old_version = None
              if old_raw:
                  old_version = tomllib.loads(old_raw).get("project", {}).get("version")

              if new_version and new_version != old_version:
                  python_dirs.add(str(file_path.parent))

          js_list = sorted(js_dirs)
          python_list = sorted(python_dirs)

          print(f"JavaScript packages to publish: {js_list}")
          print(f"Python packages to publish: {python_list}")

          output_path = Path(os.environ["GITHUB_OUTPUT"])
          with output_path.open("a") as fh:
              fh.write(f"js_matrix={json.dumps(js_list)}\n")
              fh.write(f"python_matrix={json.dumps(python_list)}\n")
          PY

  publish_js:
    needs: detect
    if: needs.detect.outputs.js_matrix != '[]'
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'release' || 'release-dry-run' }}
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect.outputs.js_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Publish JavaScript package (dry run)
        if: github.event_name != 'push'
        working-directory: ${{ matrix.package }}
        run: bun pm pack --dry-run --quiet

      - name: Publish JavaScript package
        if: github.event_name == 'push'
        working-directory: ${{ matrix.package }}
        env:
          NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: bun publish --access public

  publish_python:
    needs: detect
    if: needs.detect.outputs.python_matrix != '[]'
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'release' || 'release-dry-run' }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect.outputs.python_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Build Python package
        working-directory: ${{ matrix.package }}
        run: |
          rm -rf dist
          uv build

      - name: Inspect build output
        if: github.event_name != 'push'
        working-directory: ${{ matrix.package }}
        run: ls -R dist

      - name: Publish Python package
        if: github.event_name == 'push'
        working-directory: ${{ matrix.package }}
        run: uv publish
