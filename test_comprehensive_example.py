#!/usr/bin/env python3
"""
Comprehensive example demonstrating the complete Pulse UI system.

This example shows all features working together:
- Direct UI tree generation
- React component integration
- Route definition
- TypeScript code generation
- Complex nested structures
"""

import json
import tempfile
from pathlib import Path
from pulse.html import (
    define_react_component, define_route,
    div, h1, h2, h3, p, button, ul, li, span, strong, br
)
from pulse.codegen import write_generated_files


def main():
    """Run the comprehensive example."""
    print("🚀 Pulse UI Comprehensive Example")
    print("=" * 50)
    
    # Clear any existing components
    if hasattr(define_react_component, '_components'):
        define_react_component._components.clear()
    
    print("📦 Defining React Components...")
    
    # Define React components that would exist in the client-side codebase
    Header = define_react_component(
        component_key="header",
        import_path="../ui-tree/demo-components",
        export_name="Header", 
        is_default_export=False
    )
    
    Card = define_react_component(
        component_key="card",
        import_path="../ui-tree/demo-components",
        export_name="Card",
        is_default_export=False
    )
    
    Counter = define_react_component(
        component_key="counter",
        import_path="../ui-tree/demo-components", 
        export_name="Counter",
        is_default_export=False
    )
    
    ColorBox = define_react_component(
        component_key="color-box",
        import_path="../ui-tree/demo-components",
        export_name="ColorBox",
        is_default_export=False
    )
    
    UserCard = define_react_component(
        component_key="user-card",
        import_path="../ui-tree/demo-components",
        export_name="UserCard", 
        is_default_export=False
    )
    
    Button = define_react_component(
        component_key="button",
        import_path="../ui-tree/demo-components",
        export_name="Button",
        is_default_export=False
    )
    
    print("🛣️  Defining Routes...")
    
    # Define routes using Python functions
    @define_route("/", components=[])
    def home_route():
        """Home page with pure HTML content."""
        return div(className="home-page")[
            div(className="hero")[
                h1(className="hero-title")["Welcome to Pulse UI"],
                p(className="hero-subtitle")["Server-rendered React components with Python integration"],
                div(className="hero-features")[
                    div(className="feature")[
                        h3()["🐍 Python Backend"],
                        p()["Define UI structures using familiar Python syntax"]
                    ],
                    div(className="feature")[
                        h3()["⚛️ React Frontend"], 
                        p()["Full React component capabilities with server-side rendering"]
                    ],
                    div(className="feature")[
                        h3()["🔄 Real-time Updates"],
                        p()["WebSocket integration for live UI updates"]
                    ]
                ]
            ]
        ]
    
    @define_route("/demo", components=["header", "card", "counter", "color-box"])
    def demo_route():
        """Demo page showcasing React components with server-rendered children."""
        return div(className="demo-page")[
            Header(title="Component Demo", subtitle="Server-rendered React components"),
            
            div(className="demo-grid")[
                Card(title="Counter Example", variant="primary")[
                    p()["This counter component has internal state but renders server-provided children:"],
                    Counter(count=42, label="Demo Counter")[
                        "This text was generated on the Python server!",
                        br(),
                        strong()["The counter state is managed by React on the client."]
                    ]
                ],
                
                Card(title="Stateful Color Box")[
                    p()["This component demonstrates client-side state with server-side content:"],
                    ColorBox(title="Interactive Demo", initialColor="blue")[
                        h3()["Server-Rendered Content"],
                        p()["This content was generated by Python and passed as children to the React component."],
                        ul()[
                            li()["✅ Server-side content generation"],
                            li()["✅ Client-side state management"], 
                            li()["✅ Seamless integration"]
                        ]
                    ]
                ],
                
                Card(title="Nested Components")[
                    p()["Components can be deeply nested with mixed content:"],
                    div(className="nested-example")[
                        "Regular HTML text",
                        Counter(count=10, label="Nested Counter"),
                        p()["More HTML content"],
                        ColorBox(initialColor="green")[
                            "Content inside the color box",
                            Counter(count=5)[
                                "Counter inside color box!"
                            ]
                        ]
                    ]
                ]
            ]
        ]
    
    @define_route("/users", components=["user-card", "button"])
    def users_route():
        """Users page demonstrating dynamic content generation."""
        # Simulate fetching user data
        users = [
            {"id": 1, "name": "Alice Johnson", "email": "alice@example.com", "role": "Admin"},
            {"id": 2, "name": "Bob Smith", "email": "bob@example.com", "role": "User"},
            {"id": 3, "name": "Carol Davis", "email": "carol@example.com", "role": "Moderator"},
        ]
        
        return div(className="users-page")[
            h1()["User Directory"],
            p()[f"Showing {len(users)} users"],
            
            div(className="users-grid")[
                *[UserCard(
                    name=user["name"],
                    email=user["email"],
                    role=user["role"],
                    avatar=f"https://i.pravatar.cc/150?u={user['email']}"
                ) for user in users]
            ],
            
            div(className="actions")[
                Button(variant="primary")["Add New User"],
                Button(variant="secondary")["Export List"],
                Button(variant="danger")["Bulk Actions"]
            ]
        ]
    
    print("🔧 Generating TypeScript Files...")
    
    routes = [home_route, demo_route, users_route]
    
    # Generate files in a temporary directory for demonstration
    with tempfile.TemporaryDirectory() as temp_dir:
        app_dir = Path(temp_dir) / "app"
        write_generated_files(routes, str(app_dir))
        
        print(f"📁 Generated files in {app_dir}")
        
        # Show what was generated
        routes_dir = app_dir / "routes"
        generated_files = list(routes_dir.glob("*.tsx"))
        config_file = app_dir / "routes.ts"
        
        print(f"   📄 {len(generated_files)} route files:")
        for file in generated_files:
            print(f"     • {file.name}")
        print(f"   📄 {config_file.name} (routes configuration)")
        
        print("\n📝 Sample Generated Content:")
        print("-" * 30)
        
        # Show content of the demo route (most complex)
        demo_content = (routes_dir / "demo.tsx").read_text()
        
        print("🎯 Component Registry from demo.tsx:")
        lines = demo_content.split('\n')
        in_registry = False
        for line in lines:
            if 'const componentRegistry' in line:
                in_registry = True
            if in_registry:
                print(f"   {line}")
                if line.strip() == '};':
                    break
        
        print("\n🌳 UI Tree Structure (first few levels):")
        # Find and parse the initialTree
        tree_start = demo_content.find('const initialTree = ')
        if tree_start != -1:
            tree_end = demo_content.find('};', tree_start) + 2
            tree_json_str = demo_content[tree_start + 20:tree_end - 1]  # Remove 'const initialTree = ' and final ';'
            try:
                tree_data = json.loads(tree_json_str)
                print(f"   Root: {tree_data['tag']} (className: {tree_data['props'].get('className', 'none')})")
                for i, child in enumerate(tree_data.get('children', [])[:3]):  # Show first 3 children
                    if isinstance(child, dict):
                        tag = child['tag']
                        if tag.startswith('$$'):
                            print(f"   ├─ React Component: {tag[2:]} (props: {len(child.get('props', {}))})")
                        else:
                            print(f"   ├─ HTML Element: {tag}")
                    else:
                        print(f"   ├─ Text: {child[:30]}{'...' if len(str(child)) > 30 else ''}")
                if len(tree_data.get('children', [])) > 3:
                    print(f"   └─ ... and {len(tree_data['children']) - 3} more children")
            except json.JSONDecodeError:
                print("   (Could not parse tree structure)")
        
        print("\n✨ System Features Demonstrated:")
        features = [
            "✅ Direct UI tree generation (no HTML string conversion)",
            "✅ React component integration with server-rendered children", 
            "✅ Stateful components (Counter, ColorBox) with server content",
            "✅ Dynamic content generation (user list from Python data)",
            "✅ Nested component structures", 
            "✅ Mixed HTML and React content",
            "✅ TypeScript code generation with component registries",
            "✅ Route-specific component optimization",
            "✅ JSON serialization of complex UI structures"
        ]
        
        for feature in features:
            print(f"   {feature}")
        
        print("\n🎉 Comprehensive Example Complete!")
        print("   The system successfully:")
        print("   • Generated UI trees directly from Python")
        print("   • Integrated React components with server content")
        print("   • Created TypeScript files with proper imports")
        print("   • Demonstrated complex nested structures")
        print("   • Showed real-world usage patterns")


if __name__ == "__main__":
    main()